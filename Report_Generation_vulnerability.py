import pandas as pd

# Define the vulnerability data
vulnerability_data = [
    {"vulnerability": "Memory Corruption", "description": "Occurs when a program unintentionally alters the contents of a memory location, potentially leading to crashes or execution of arbitrary code."},
    {"vulnerability": "SQL Injection", "description": "Allows attackers to manipulate SQL queries made to a database by injecting malicious input, potentially leading to data breaches or privilege escalation."},
    {"vulnerability": "Denial of Service (DoS)", "description": "Overloads a system with requests, causing it to become unresponsive or crash, often targeting network services or device drivers."},
    {"vulnerability": "Privilege Escalation", "description": "Allows attackers to gain higher-level access to a system than intended, potentially leading to full device control through improper permission handling."},
    {"vulnerability": "Buffer Overflow", "description": "Occurs when data exceeds a bufferâ€™s capacity, causing adjacent memory to be overwritten, potentially allowing arbitrary code execution."},
    {"vulnerability": "Information Disclosure", "description": "Allows unauthorized access to sensitive information such as user credentials, personal data, or system logs, potentially leading to data theft."},
    {"vulnerability": "Code Execution", "description": "Allows attackers to run arbitrary code on the affected device, often through memory corruption or improper input validation, leading to full system compromise."},
    {"vulnerability": "Bypass", "description": "Allows attackers to circumvent security mechanisms such as authentication, sandboxing, or encryption, leading to unauthorized access or privilege escalation."},
    {"vulnerability": "Directory Traversal", "description": "Allows attackers to access directories and files outside the intended directories by manipulating file paths, potentially exposing sensitive data."}
]

# Convert the data into a pandas DataFrame
df = pd.DataFrame(vulnerability_data)

# Save the data to a CSV file
df.to_csv('vulnerability_dataset.csv', index=False)

print("Vulnerability dataset successfully created and saved as 'vulnerability_dataset.csv'.")
